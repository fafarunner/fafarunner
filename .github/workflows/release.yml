name: Release
on:
  # Enable manual run
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: "Which environment are you using?"
        required: true
        default: "staging"
        options:
          - staging
          - production

# Declare default permissions as readonly.
permissions: read-all

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_step.outputs.version }}
      version_short: ${{ steps.version_step.outputs.version_short }}
      build_number: ${{ steps.version_step.outputs.build_number }}
    steps:
      - uses: actions/checkout@v4

      - name: Set sha_short
        id: sha_short_step
        run: echo "sha_short=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

      - name: Check sha_short
        run: echo ${{ steps.sha_short_step.outputs.sha_short }}

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            brew install yq
          fi
          yq --version

      - name: Set version
        id: version_step
        run: | 
          VERSION=$(yq '.version' pubspec.yaml)
          echo "$VERSION"

          VERSION_SHORT=$(echo "$VERSION" | sed -e "s/+.*//")
          echo "$VERSION_SHORT"

          BUILD_NUMBER=$(echo "$VERSION" | sed -e "s/.*+//")
          echo "$BUILD_NUMBER"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_short=$VERSION_SHORT" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Check version
        run: |
          echo "version: $VERSION"
          echo "version_short: $VERSION_SHORT"
          echo "build_number: $BUILD_NUMBER"
        env:
          VERSION: ${{ steps.version_step.outputs.version }}
          VERSION_SHORT: ${{ steps.version_step.outputs.version_short }}
          BUILD_NUMBER: ${{ steps.version_step.outputs.build_number }}

      - name: Show gh info
        run: gh --version

      - name: Create a release
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          RELEASE_NOTES="Env: $ENV <br /> Branch: $BRANCH <br /> Commit: $COMMIT_REF"
          if [ "$ENV" == "production" ]; then
            gh release create "$RELEASE" --latest --title "$RELEASE" --notes "$RELEASE_NOTES"
          else
            gh release create "$RELEASE" --prerelease --title "$RELEASE" --notes "$RELEASE_NOTES"
          fi
        env:
          ENV: ${{ github.event.inputs.env }}
          BRANCH: ${{ github.ref_name }}
          COMMIT_REF: ${{ steps.sha_short_step.outputs.sha_short }}
          TAG_NAME: "v${{ steps.version_step.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

  gen_shasum:
    name: Gen Shasum
    runs-on: ubuntu-latest
    needs:
      - create_release
      - apk
      - aab
      - ios
      - macos_dmg
      - macos_pkg
      - macos_appstore
      - macos_zip
      - macos_tar
      - linux_appimage
      - linux_appimage_aarch64
      - linux_pacman
      - linux_pacman_aarch64
      - linux_deb
      - linux_deb_aarch64
      - linux_rpm
      - linux_rpm_aarch64
      - linux_zip
      - linux_zip_aarch64
      - linux_tar
      - linux_tar_aarch64
      - linux_flatpak
      - linux_flatpak_aarch64
      - linux_snap
      - linux_snap_aarch64
      - windows_msi
      - windows_msix
      - windows_exe
      - windows_zip
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install ts-shasum
        run: pnpm add --global ts-shasum

      - name: Download assets
        uses: robinraju/release-downloader@v1
        with:
          tag: "v${{ needs.create_release.outputs.version }}${{ github.event.inputs.env == 'staging' && '.pre' || '' }}"
          fileName: '*'
          tarBall: true
          zipBall: true
          out-file-path: 'fr-downloads'
      
      - name: Gen SHASUMS256.txt
        run: shasum create "$GITHUB_WORKSPACE/SHASUMS256.txt" *
        working-directory: ${{ github.workspace }}/fr-downloads

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./SHASUMS256.txt
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

#  remove_release:
#      name: Remove release
#      if: ${{ cancelled() || failure() }}
#      runs-on: ubuntu-latest
#      needs:
#        - create_release
#        - apk
#        - aab
#        - ios
#        - macos_dmg
#        - macos_pkg
#        - macos_appstore
#        - macos_zip
#        - macos_tar
#        - linux_appimage
#        - linux_appimage_aarch64
#        - linux_pacman
#        - linux_pacman_aarch64
#        - linux_deb
#        - linux_deb_aarch64
#        - linux_rpm
#        - linux_rpm_aarch64
#        - linux_zip
#        - linux_zip_aarch64
#        - linux_tar
#        - linux_tar_aarch64
#        - linux_flatpak
#        - linux_flatpak_aarch64
#        - linux_snap
#        - linux_snap_aarch64
#        - windows_msi
#        - windows_msix
#        - windows_exe
#        - windows_zip
#      steps:
#        - uses: actions/checkout@v4
#
#        - name: Show gh info
#          run: gh --version
#
#        - name: Remove a release
#          run: |
#            RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
#            gh release delete -y --cleanup-tag "$RELEASE"
#          env:
#            ENV: ${{ github.event.inputs.env }}
#            TAG_NAME: "v${{ needs.create_release.outputs.version }}"
#            GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

  apk:
    name: Create apk
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - name: Build apk
        run: |
          FLAVOR="$([[ "$ENV" == "staging" ]] && echo "staging" || echo "production")"
          flutter build apk --dart-define-from-file=.env --no-tree-shake-icons --flavor $FLAVOR
        env:
          ENV: ${{ github.event.inputs.env }}

      # Package the build.
      - name: Copy build for Android
        if: github.event.inputs.env == 'staging'
        run: |
          ls -la
          cp *.apk $GITHUB_WORKSPACE/
        working-directory: build/app/outputs/apk/staging/release

      - name: Copy build for Android
        if: github.event.inputs.env == 'production'
        run: |
          ls -la
          cp *.apk $GITHUB_WORKSPACE/
        working-directory: build/app/outputs/apk/production/release

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.apk
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env

  aab:
    name: Create appbundle
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - name: Build appbundle
        run: |
          FLAVOR="$([[ "$ENV" == "staging" ]] && echo "staging" || echo "production")"
          flutter build appbundle --dart-define-from-file=.env --no-tree-shake-icons --flavor $FLAVOR
        env:
          ENV: ${{ github.event.inputs.env }}

      # Package the build.
      - name: Copy build for Android
        if: github.event.inputs.env == 'staging'
        run: |
          ls -la
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          cp *.aab $GITHUB_WORKSPACE/FaFaRunner_$RELEASE.aab
        working-directory: build/app/outputs/bundle/stagingRelease
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      - name: Copy build for Android
        if: github.event.inputs.env == 'production'
        run: |
          ls -la
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          cp *.aab $GITHUB_WORKSPACE/FaFaRunner_$RELEASE.aab
        working-directory: build/app/outputs/bundle/productionRelease
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.aab
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env

  ios:
    name: Create ios
    runs-on: macos-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving ios dependencies
        run: cd ios && pod install --repo-update && cd ..

      - name: Install the Apple certificate and provisioning profile
        env:
          CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          CERT_DEV_BASE64: ${{ secrets.CERT_DEV_BASE64 }}
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_DEV_BASE64: ${{ secrets.P12_DEV_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          PROVISION_PROFILE_DEV_BASE64: ${{ secrets.PROVISIONING_PROFILE_DEV_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          CERTIFICATE_DEV_PATH=$RUNNER_TEMP/build_certificate_dev.p12
          CERT_PATH=$RUNNER_TEMP/ios_distribution.cer
          CERT_DEV_PATH=$RUNNER_TEMP/ios_development.cer
          PP_PATH=$RUNNER_TEMP/fafa_runner_appstore.mobileprovision
          PP_DEV_PATH=$RUNNER_TEMP/fafa_runner_dev.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$P12_DEV_BASE64" | base64 --decode --output $CERTIFICATE_DEV_PATH
          echo -n "$CERT_BASE64" | base64 --decode --output $CERT_PATH
          echo -n "$CERT_DEV_BASE64" | base64 --decode --output $CERT_DEV_PATH
          echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $PP_DEV_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_DEV_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERT_PATH -P "$P12_PASSWORD" -A -t cert -k $KEYCHAIN_PATH
          security import $CERT_DEV_PATH -P "$P12_PASSWORD" -A -t cert -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build ipa
        if: github.event.inputs.env == 'staging'
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd ios && xcodebuild clean && cd ..
          echo "╠ Releasing to adhoc..."
          flutter build ipa --dart-define-from-file=.env --export-options-plist=ios/ExportOptions-debug.plist

      - name: Build ipa
        if: github.event.inputs.env == 'production'
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd ios && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          flutter build ipa --dart-define-from-file=.env --export-options-plist=ios/ExportOptions-release.plist

      # Package the build.
      - name: Copy build for iOS
        run: |
          ls -la
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          cp *.ipa $GITHUB_WORKSPACE/FaFaRunner_$RELEASE.ipa
        working-directory: build/ios/ipa
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.ipa
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/fr-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/fr-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/fr-signing.keychain-db
          fi
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/fafa_runner_*.mobileprovision
          rm -f .env

  macos_dmg:
    name: Create macos dmg
    runs-on: macos-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: cd macos && pod install --repo-update && cd ..

      - name: Build macOS
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd macos && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/fr-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime FaFa\ Runner.app -v
        working-directory: build/macos/Build/Products/Release
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "FaFa Runner.app" "FaFa Runner.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "FaFa Runner.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "FaFa Runner.app"
        working-directory: build/macos/Build/Products/Release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Install appdmg
        run: |
          pnpm add -g appdmg

      - name: Build DMG
        run: |
          bash scripts/build-dmg.sh
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          mv FaFa\ Runner.dmg FaFaRunner_"$RELEASE"_macos_universal.dmg
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      # Package the build.
      - name: Copy build for dmg
        run: ls -la *.dmg

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.dmg
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/fr-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/fr-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/fr-signing.keychain-db
          fi
          rm -f .env

  macos_pkg:
    name: Create macos pkg
    runs-on: macos-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: cd macos && pod install --repo-update && cd ..

      - name: Build macOS
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd macos && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env

      - name: Install certificates
        run: |
          # create variables
          DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_installer_certificate.p12
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/fr-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_INSTALLER_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        env:
          DEVELOPER_ID_INSTALLER_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_INSTALLER_P12_BASE64_MAC }}
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Code Signing
        run: |
          # https://stackoverflow.com/questions/70991268/how-to-sign-and-notarize-a-pkg-within-a-github-actions-macos-runner
          bash scripts/codesign-pkg.sh "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY"
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Build & Sign pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          xcrun pkgbuild --component "./FaFa Runner.app" --install-location /Applications --sign "$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY" FaFa\ Runner-unsigned.pkg
          xcrun productbuild --package FaFa\ Runner-unsigned.pkg --sign "$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY" FaFa\ Runner.pkg
        env:
          DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY }}
        working-directory: build/macos/Build/Products/Release

      - name: Notarize & Staple
        run: |
          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize pkg"
          xcrun notarytool submit "FaFa Runner.pkg" --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --output-format "json" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "FaFa Runner.pkg"
        working-directory: build/macos/Build/Products/Release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      # Package the build.
      - name: Copy build for pkg
        run: |
          rm -f FaFa\ Runner-unsigned.pkg
          ls -la *.pkg
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          mv FaFa\ Runner.pkg $GITHUB_WORKSPACE/FaFaRunner_"$RELEASE"_macos_universal.pkg
        working-directory: build/macos/Build/Products/Release
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.pkg
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/fr-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/fr-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/fr-signing.keychain-db
          fi
          rm -f .env

  macos_appstore:
    name: Create macos pkg (appstore)
    runs-on: macos-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: cd macos && pod install --repo-update && cd ..

      - name: Build macOS
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd macos && xcodebuild clean && cd ..
          echo "╠ Releasing to mac app store..."
          flutter build macos --dart-define-from-file=.env

      - name: Install certificates
        run: |
          # create variables
          # Mac Installer Distribution
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/build_mac_developer_installer_certificate.p12
          # Mac App Distribution
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_mac_developer_application_certificate.p12
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PATH=$RUNNER_TEMP/fafa_runner_mac_appstore.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/fr-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # apply provisioning profile
          # https://developer.apple.com/documentation/bundleresources/placing_content_in_a_bundle/
          # security cms -D -i fafa_runner_mac_appstore.provisionprofile
          mv $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PATH build/macos/Build/Products/Release/FaFa\ Runner.app/Contents/embedded.provisionprofile
        env:
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC }}
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC }}
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Code Signing
        run: |
          # https://stackoverflow.com/questions/70991268/how-to-sign-and-notarize-a-pkg-within-a-github-actions-macos-runner
          # https://developer.apple.com/forums/thread/733942
          # https://stackoverflow.com/questions/60384835/dyld-library-not-loaded-code-signature-invalid
          # codesign -dvvv FaFa\ Runner.app
          # https://lessons.livecode.com/a/876834-signing-and-uploading-apps-to-the-mac-app-store
          
          # 1. Code sign executables
          echo "Code sign executables"
          /usr/bin/codesign --deep --force --sign "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY" build/macos/Build/Products/Release/FaFa\ Runner.app
          
          # 2. Code sign entitlements.plist
          echo "Code sign entitlements.plist"
          /usr/bin/codesign --force --sign "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY" --entitlements macos/Runner/AppStore-Release.entitlements build/macos/Build/Products/Release/FaFa\ Runner.app
          
          # 3. Just to confirm all is well, verify the code signing
          # No response means that there were no errors and it is code signed.
          # /usr/bin/codesign --verify build/macos/Build/Products/Release/FaFa\ Runner.app
        env:
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY }}

      - name: Create pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          # [Test the installer].  (Note the "-target /" that comes after the path to the pkg file)
          # It will go through the installation process to confirm that the installer package is OK.
          # NOTE: If the app is signed for distribution to the Mac App Store the resulting app will not run locally.
          # sudo installer -store -package <path_to_app_pkg_file> -target /
          xcrun productbuild --sign "$THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY" --component FaFa\ Runner.app /Applications FaFa\ Runner.pkg
        env:
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY }}
        working-directory: build/macos/Build/Products/Release

      # Package the build.
      - name: Copy build for pkg
        run: |
          ls -la *.pkg
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          cp FaFa\ Runner.pkg $GITHUB_WORKSPACE/FaFaRunner_"$RELEASE"_macos_appstore_universal.pkg
        working-directory: build/macos/Build/Products/Release
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.pkg
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/fr-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/fr-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/fr-signing.keychain-db
          fi
          rm -f .env

  macos_zip:
    name: Create macos zip
    runs-on: macos-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install p7zip
        run: |
          if ! command -v 7z >/dev/null 2>&1; then
            echo "7z not exists"
            brew install p7zip
          fi

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: cd macos && pod install --repo-update && cd ..

      - name: Build macOS
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd macos && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/fr-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime FaFa\ Runner.app -v
        working-directory: build/macos/Build/Products/Release
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "FaFa Runner.app" "FaFa Runner.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "FaFa Runner.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "FaFa Runner.app"
        working-directory: build/macos/Build/Products/Release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build zip
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          7z a FaFaRunner_"$RELEASE"_macos_universal.zip ./FaFa\ Runner.app
        working-directory: build/macos/Build/Products/Release
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      # Package the build.
      - name: Copy build for zip
        run: |
          ls -la *.zip
          mv FaFaRunner_*_macos_universal.zip $GITHUB_WORKSPACE/
        working-directory: build/macos/Build/Products/Release

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.zip
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/fr-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/fr-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/fr-signing.keychain-db
          fi
          rm -f .env

  macos_tar:
    name: Create macos tar
    runs-on: macos-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: cd macos && pod install --repo-update && cd ..

      - name: Build macOS
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd macos && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/fr-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime FaFa\ Runner.app -v
        working-directory: build/macos/Build/Products/Release
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "FaFa Runner.app" "FaFa Runner.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "FaFa Runner.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "FaFa Runner.app"
        working-directory: build/macos/Build/Products/Release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build tar
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          tar -czaf FaFaRunner_"$RELEASE"_macos_universal.tar.gz ./FaFa\ Runner.app
        working-directory: build/macos/Build/Products/Release
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      # Package the build.
      - name: Copy build for tar
        run: |
          ls -la *.tar.gz
          mv *.tar.gz $GITHUB_WORKSPACE/
        working-directory: build/macos/Build/Products/Release

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.tar.gz
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/fr-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/fr-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/fr-signing.keychain-db
          fi
          rm -f .env

  linux_appimage:
    name: Create linux AppImage
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          sudo apt install -y locate libfuse2
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool && mv appimagetool /usr/local/bin/

      - name: Install GStreamer
        run: |
          # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build AppImage
        run: |
          VERSION_SUFFIX="$([[ "$ENV" == "staging" ]] && echo ".pre" || echo "")"
          flutter_distributor package --flutter-build-args "dart-define-from-file=.env,target-platform=linux-x64" --platform linux --targets appimage --artifact-name {{name}}_{{build_name}}+{{build_number}}"$VERSION_SUFFIX"_{{platform}}_amd64.{{ext}}
        env:
          ENV: ${{ github.event.inputs.env }}

      # Package the build.
      - name: Copy build for AppImage
        run: |
          ls -laR
          cp ./**/*.AppImage $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.AppImage
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_appimage_aarch64:
    name: Create linux AppImage (aarch64)
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install qemu-user-static
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      # https://github.com/s3fs-fuse/s3fs-fuse/issues/647#issuecomment-637458150
      - uses: addnab/docker-run-action@v3
        with:
          image: arm64v8/ubuntu:22.04
          options: |
            --rm
            --cap-add SYS_ADMIN
            --device /dev/fuse
            --security-opt apparmor:unconfined
            -v ${{ github.workspace }}:/work
            --workdir /work
            -e ENV=${{ github.event.inputs.env }}
          shell: bash
          run: |
            set -x
            # Show linux info
            echo "Show linux info"
            uname --all

            # Install dependencies for Linux
            echo "Install dependencies for Linux"
            apt update && apt install -y sudo
            sudo apt install -y wget curl git unzip xz-utils zip libglu1-mesa file
            sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
            sudo apt install -y locate libfuse2

            # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
            sudo apt install -y libunwind-dev
            sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

            # Install appimagetool
            echo "Install appimagetool"
            wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage"
            # https://github.com/AppImage/AppImageKit/issues/1056#issuecomment-643382397
            sed -i 's|AI\x02|\x00\x00\x00|' appimagetool
            chmod +x appimagetool && mv appimagetool /usr/local/bin/
            
            # Setup Flutter
            echo "Setup Flutter"
            bash ./scripts/install-flutter-ubuntu.sh
            
            if [ -d "/home/linux-arm64/flutter" ]; then
              echo "🟩 ls -la"
              ls -la /home/linux-arm64/flutter
            fi
            echo 'export PATH="$PATH:/home/linux-arm64/flutter/bin:/home/linux-arm64/flutter/.pub-cache/bin:$HOME/.pub-cache/bin"' >> ~/.zshrc
            source ~/.zshrc
            echo $PATH

            # Flutter doctor
            echo "Flutter doctor -v"
            flutter doctor -v
            
            # Install flutter_distributor
            echo "Install flutter_distributor"
            dart pub global activate --source git https://github.com/kjxbyz/flutter_distributor --git-ref pacman --git-path packages/flutter_distributor
            
            # Install flutter dependencies
            echo "Install flutter dependencies"
            flutter pub get

            VERSION_SUFFIX="$([[ "$ENV" == "staging" ]] && echo ".pre" || echo "")"
            echo "VERSION_SUFFIX: $VERSION_SUFFIX"
            
            # Build AppImage
            echo "Build AppImage"
            flutter_distributor package --flutter-build-args "dart-define-from-file=.env,target-platform=linux-arm64" --platform linux --targets appimage --artifact-name {{name}}_{{build_name}}+{{build_number}}"$VERSION_SUFFIX"_{{platform}}_aarch64.{{ext}}

      # Package the build.
      - name: Copy build for AppImage
        run: |
          ls -laR
          cp ./**/*.AppImage $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.AppImage
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_pacman:
    name: Create linux pacman
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          sudo apt install -y locate libfuse2
          sudo apt install -y libarchive-tools

      - name: Install GStreamer
        run: |
          # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install flutter_distributor
        run: |
          dart pub global activate flutter_distributor

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build Pacman
        run: |
          VERSION_SUFFIX="$([[ "$ENV" == "staging" ]] && echo ".pre" || echo "")"
          flutter_distributor package --flutter-build-args "dart-define-from-file=.env,target-platform=linux-x64" --platform linux --targets pacman --artifact-name {{name}}_{{build_name}}+{{build_number}}"$VERSION_SUFFIX"_{{platform}}_amd64.{{ext}}
        env:
          ENV: ${{ github.event.inputs.env }}

      # Package the build.
      - name: Copy build for Pacman
        run: |
          ls -laR
          cp ./**/*.pacman $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.pacman
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_pacman_aarch64:
    name: Create linux pacman (aarch64)
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Show linux info
        run: uname --all

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install qemu-user-static
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      # https://github.com/s3fs-fuse/s3fs-fuse/issues/647#issuecomment-637458150
      - uses: addnab/docker-run-action@v3
        with:
          image: arm64v8/ubuntu:22.04
          options: |
            --rm
            --cap-add SYS_ADMIN
            --device /dev/fuse
            --security-opt apparmor:unconfined
            -v ${{ github.workspace }}:/work
            --workdir /work
            -e ENV=${{ github.event.inputs.env }}
          shell: bash
          run: |
            set -x
            # Show linux info
            echo "Show linux info"
            uname --all

            # Install dependencies for Linux
            echo "Install dependencies for Linux"
            apt update && apt install -y sudo
            sudo apt install -y wget curl git unzip xz-utils zip libglu1-mesa file
            sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
            sudo apt install -y locate libfuse2
            sudo apt install -y libarchive-tools

            # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
            sudo apt install -y libunwind-dev
            sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

            # Setup Flutter
            echo "Setup Flutter"
            bash ./scripts/install-flutter-ubuntu.sh
            
            if [ -d "/home/linux-arm64/flutter" ]; then
              echo "🟩 ls -la"
              ls -la /home/linux-arm64/flutter
            fi
            echo 'export PATH="$PATH:/home/linux-arm64/flutter/bin:/home/linux-arm64/flutter/.pub-cache/bin:$HOME/.pub-cache/bin"' >> ~/.zshrc
            source ~/.zshrc
            echo $PATH

            # Flutter doctor
            echo "Flutter doctor -v"
            flutter doctor -v
            
            # Install flutter_distributor
            echo "Install flutter_distributor"
            dart pub global activate --source git https://github.com/kjxbyz/flutter_distributor --git-ref pacman --git-path packages/flutter_distributor
            
            # Install flutter dependencies
            echo "Install flutter dependencies"
            flutter pub get

            VERSION_SUFFIX="$([[ "$ENV" == "staging" ]] && echo ".pre" || echo "")"
            echo "VERSION_SUFFIX: $VERSION_SUFFIX"
            
            # Build Pacman
            echo "Build Pacman"
            flutter_distributor package --flutter-build-args "dart-define-from-file=.env,target-platform=linux-arm64" --platform linux --targets pacman --artifact-name {{name}}_{{build_name}}+{{build_number}}"$VERSION_SUFFIX"_{{platform}}_aarch64.{{ext}}

      # Package the build.
      - name: Copy build for Pacman
        run: |
          ls -laR
          cp ./**/*.pacman $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.pacman
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_deb:
    name: Create linux deb
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          sudo apt install -y rpm patchelf

      - name: Install GStreamer
        run: |
          # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build deb
        run: |
          VERSION_SUFFIX="$([[ "$ENV" == "staging" ]] && echo ".pre" || echo "")"
          flutter_distributor package --flutter-build-args "dart-define-from-file=.env,target-platform=linux-x64" --platform linux --targets deb --artifact-name {{name}}_{{build_name}}+{{build_number}}"$VERSION_SUFFIX"_{{platform}}_amd64.{{ext}}
        env:
          ENV: ${{ github.event.inputs.env }}

      # Package the build.
      - name: Copy build for deb
        run: |
          ls -laR
          cp ./**/*.deb $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.deb
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_deb_aarch64:
    name: Create linux deb (aarch64)
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install qemu-user-static
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - uses: addnab/docker-run-action@v3
        with:
          image: arm64v8/ubuntu:22.04
          options: |
            --rm
            --cap-add SYS_ADMIN
            --device /dev/fuse
            --security-opt apparmor:unconfined
            -v ${{ github.workspace }}:/work
            --workdir /work
            -e ENV=${{ github.event.inputs.env }}
          shell: bash
          run: |
            set -x
            # Show linux info
            echo "Show linux info"
            uname --all

            # Install dependencies for Linux
            echo "Install dependencies for Linux"
            apt update && apt install -y sudo
            sudo apt install -y wget curl git unzip xz-utils zip libglu1-mesa file
            sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
            
            # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
            sudo apt install -y libunwind-dev
            sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

            # Setup Flutter
            echo "Setup Flutter"
            bash ./scripts/install-flutter-ubuntu.sh
            
            if [ -d "/home/linux-arm64/flutter" ]; then
              echo "🟩 ls -la"
              ls -la /home/linux-arm64/flutter
            fi
            echo 'export PATH="$PATH:/home/linux-arm64/flutter/bin:/home/linux-arm64/flutter/.pub-cache/bin:$HOME/.pub-cache/bin"' >> ~/.zshrc
            source ~/.zshrc
            echo $PATH

            # Flutter doctor
            echo "Flutter doctor -v"
            flutter doctor -v

            # Install flutter_distributor
            echo "Install flutter_distributor"
            dart pub global activate flutter_distributor

            # Install flutter dependencies
            echo "Install flutter dependencies"
            flutter pub get

            VERSION_SUFFIX="$([[ "$ENV" == "staging" ]] && echo ".pre" || echo "")"
            echo "VERSION_SUFFIX: $VERSION_SUFFIX"

            # Build deb
            echo "Build deb"
            flutter_distributor package --flutter-build-args "dart-define-from-file=.env,target-platform=linux-arm64" --platform linux --targets deb --artifact-name {{name}}_{{build_name}}+{{build_number}}"$VERSION_SUFFIX"_{{platform}}_aarch64.{{ext}}

      # Package the build.
      - name: Copy build for deb
        run: |
          ls -laR
          cp ./**/*.deb $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.deb
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_rpm:
    name: Create linux rpm
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Install GStreamer
        run: |
          # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build RPM
        run: |
          VERSION_SUFFIX="$([[ "$ENV" == "staging" ]] && echo ".pre" || echo "")"
          flutter_distributor package --flutter-build-args "dart-define-from-file=.env,target-platform=linux-x64" --platform linux --targets rpm --artifact-name {{name}}_{{build_name}}+{{build_number}}"$VERSION_SUFFIX"_{{platform}}_amd64.{{ext}}
        env:
          ENV: ${{ github.event.inputs.env }}

      # Package the build.
      - name: Copy build for rpm
        run: |
          ls -laR
          cp ./**/*.rpm $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.rpm
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_rpm_aarch64:
    name: Create linux rpm (aarch64)
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install qemu-user-static
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - uses: addnab/docker-run-action@v3
        with:
          image: arm64v8/ubuntu:22.04
          options: |
            --rm
            --cap-add SYS_ADMIN
            --device /dev/fuse
            --security-opt apparmor:unconfined
            -v ${{ github.workspace }}:/work
            --workdir /work
            -e ENV=${{ github.event.inputs.env }}
          shell: bash
          run: |
            set -x
            # Show linux info
            echo "Show linux info"
            uname --all

            # Install dependencies for Linux
            echo "Install dependencies for Linux"
            apt update && apt install -y sudo
            sudo apt install -y wget curl git unzip xz-utils zip libglu1-mesa file
            sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
            sudo apt install -y rpm patchelf
            
            # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
            sudo apt install -y libunwind-dev
            sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
            
            # Install JDK
            echo "Install JDK"
            sudo apt install -y apt-transport-https gnupg
            wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | apt-key add -
            echo "deb https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
            sudo apt update
            sudo apt install -y temurin-17-jdk

            # Setup Flutter
            echo "Setup Flutter"
            bash ./scripts/install-flutter-ubuntu.sh
            
            if [ -d "/home/linux-arm64/flutter" ]; then
              echo "🟩 ls -la"
              ls -la /home/linux-arm64/flutter
            fi
            echo 'export PATH="$PATH:/home/linux-arm64/flutter/bin:/home/linux-arm64/flutter/.pub-cache/bin:$HOME/.pub-cache/bin"' >> ~/.zshrc
            source ~/.zshrc
            echo $PATH

            # Flutter doctor
            echo "Flutter doctor -v"
            flutter doctor -v

            # Install flutter_distributor
            echo "Install flutter_distributor"
            dart pub global activate flutter_distributor

            # Install flutter dependencies
            echo "Install flutter dependencies"
            flutter pub get

            # Install yq
            if ! command -v yq >/dev/null 2>&1; then
              echo "yq not exists"
              if ! command -v wget >/dev/null 2>&1; then
                echo "wget not exists"
                sudo apt install -y wget
              fi
              wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64 -O /usr/bin/yq &&\
              chmod +x /usr/bin/yq
            fi
            yq --version
            
            # Update make_config.yaml
            echo "Update make_config.yaml"
            yq -i '.build_arch = "aarch64"' linux/packaging/rpm/make_config.yaml

            VERSION_SUFFIX="$([[ "$ENV" == "staging" ]] && echo ".pre" || echo "")"
            echo "VERSION_SUFFIX: $VERSION_SUFFIX"

            # Build RPM
            echo "Build RPM"
            flutter_distributor package --flutter-build-args "dart-define-from-file=.env,target-platform=linux-arm64" --platform linux --targets rpm --artifact-name {{name}}_{{build_name}}+{{build_number}}"$VERSION_SUFFIX"_{{platform}}_aarch64.{{ext}}

      # Package the build.
      - name: Copy build for rpm
        run: |
          ls -laR
          cp ./**/*.rpm $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.rpm
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_zip:
    name: Create linux zip
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          sudo apt install -y p7zip-full p7zip-rar

      - name: Install GStreamer
        run: |
          # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build zip
        run: |
          VERSION_SUFFIX="$([[ "$ENV" == "staging" ]] && echo ".pre" || echo "")"
          flutter_distributor package --flutter-build-args "dart-define-from-file=.env,target-platform=linux-x64" --platform linux --targets zip --artifact-name {{name}}_{{build_name}}+{{build_number}}"$VERSION_SUFFIX"_{{platform}}_amd64.{{ext}}
        env:
          ENV: ${{ github.event.inputs.env }}

      # Package the build.
      - name: Copy build for zip
        run: |
          ls -laR
          cp ./**/*.zip $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.zip
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_zip_aarch64:
    name: Create linux zip (aarch64)
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install qemu-user-static
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - uses: addnab/docker-run-action@v3
        with:
          image: arm64v8/ubuntu:22.04
          options: |
            --rm
            --cap-add SYS_ADMIN
            --device /dev/fuse
            --security-opt apparmor:unconfined
            -v ${{ github.workspace }}:/work
            --workdir /work
            -e ENV=${{ github.event.inputs.env }}
          shell: bash
          run: |
            set -x
            # Show linux info
            echo "Show linux info"
            uname --all

            # Install dependencies for Linux
            echo "Install dependencies for Linux"
            apt update && apt install -y sudo
            sudo apt install -y wget curl git unzip xz-utils zip libglu1-mesa file
            sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
            sudo apt install -y p7zip-full p7zip-rar
            
            # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
            sudo apt install -y libunwind-dev
            sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

            # Setup Flutter
            echo "Setup Flutter"
            bash ./scripts/install-flutter-ubuntu.sh
            
            if [ -d "/home/linux-arm64/flutter" ]; then
              echo "🟩 ls -la"
              ls -la /home/linux-arm64/flutter
            fi
            echo 'export PATH="$PATH:/home/linux-arm64/flutter/bin:/home/linux-arm64/flutter/.pub-cache/bin:$HOME/.pub-cache/bin"' >> ~/.zshrc
            source ~/.zshrc
            echo $PATH

            # Flutter doctor
            echo "Flutter doctor -v"
            flutter doctor -v

            # Install flutter_distributor
            echo "Install flutter_distributor"
            dart pub global activate flutter_distributor

            # Install flutter dependencies
            echo "Install flutter dependencies"
            flutter pub get

            VERSION_SUFFIX="$([[ "$ENV" == "staging" ]] && echo ".pre" || echo "")"
            echo "VERSION_SUFFIX: $VERSION_SUFFIX"

            # Build zip
            echo "Build zip"
            flutter_distributor package --flutter-build-args "dart-define-from-file=.env,target-platform=linux-arm64" --platform linux --targets zip --artifact-name {{name}}_{{build_name}}+{{build_number}}"$VERSION_SUFFIX"_{{platform}}_aarch64.{{ext}}


      # Package the build.
      - name: Copy build for zip
        run: |
          ls -laR
          cp ./**/*.zip $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.zip
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_tar:
    name: Create linux tar
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          sudo apt install -y p7zip-full p7zip-rar

      - name: Install GStreamer
        run: |
          # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build flutter
        run: flutter build linux --dart-define-from-file=.env --target-platform=linux-x64

      - name: Build tar
        run: |
          baseDir=$(pwd)
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          archiveName="fafarunner_"$RELEASE"_linux_amd64.tar.gz"
          cd build/linux/x64/release/bundle
          tar -czaf $archiveName ./*
          mv $archiveName $GITHUB_WORKSPACE/
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      # Package the build.
      - name: Copy build for tar
        run: ls -la

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.tar.gz
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_tar_aarch64:
    name: Create linux tar (aarch64)
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install qemu-user-static
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - uses: addnab/docker-run-action@v3
        with:
          image: arm64v8/ubuntu:22.04
          options: |
            --rm
            --cap-add SYS_ADMIN
            --device /dev/fuse
            --security-opt apparmor:unconfined
            -v ${{ github.workspace }}:/work
            --workdir /work
            -e ENV=${{ github.event.inputs.env }}
            -e VERSION=${{ needs.create_release.outputs.version }}
          shell: bash
          run: |
            set -x
            # Show linux info
            echo "Show linux info"
            uname --all

            # Install dependencies for Linux
            echo "Install dependencies for Linux"
            apt update && apt install -y sudo
            sudo apt install -y wget curl git unzip xz-utils zip libglu1-mesa file
            sudo apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
            sudo apt install -y p7zip-full p7zip-rar
            
            # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
            sudo apt install -y libunwind-dev
            sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

            # Setup Flutter
            echo "Setup Flutter"
            bash ./scripts/install-flutter-ubuntu.sh

            if [ -d "/home/linux-arm64/flutter" ]; then
              echo "🟩 ls -la"
              ls -la /home/linux-arm64/flutter
            fi
            echo 'export PATH="$PATH:/home/linux-arm64/flutter/bin:/home/linux-arm64/flutter/.pub-cache/bin:$HOME/.pub-cache/bin"' >> ~/.zshrc
            source ~/.zshrc
            echo $PATH

            # Flutter doctor
            echo "Flutter doctor -v"
            flutter doctor -v

            # Install flutter dependencies
            echo "Install flutter dependencies"
            flutter pub get
            
            # Build flutter
            echo "Build flutter"
            flutter build linux --dart-define-from-file=.env --target-platform=linux-arm64
            
            RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
            echo "RELEASE: $RELEASE"

            # Build tar
            echo "Build tar"
            baseDir=$(pwd)
            archiveName="fafarunner_"$RELEASE"_linux_aarch64.tar.gz"
            cd build/linux/arm64/release/bundle
            tar -czaf $archiveName ./*
            mv $archiveName "$baseDir/"

      # Package the build.
      - name: Copy build for tar
        run: ls -la

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.tar.gz
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env

  linux_flatpak:
    name: Create linux flatpak
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:freedesktop-23.08
      options: --privileged
    needs:
      - create_release
      - linux_deb
    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            if ! command -v wget >/dev/null 2>&1; then
              echo "wget not exists"
              sudo dnf -y install wget
            fi
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq &&\
            chmod +x /usr/bin/yq
          fi
          yq --version

      - name: Update version
        run: |
          # Update flatpak/com.chenyifaer.FaFaRunner.yml
          TAG="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"

          url=https://github.com/fafarunner/fafarunner/releases/download/"$TAG"/fafarunner_"$RELEASE"_linux_amd64.deb
          wget -O fafarunner.deb "$url"
          sha256=$(sha256sum fafarunner.deb | awk '{print $1}')
          rm -f fafarunner.deb
          url=$url yq -i '.modules[0].sources[0].url = strenv(url)' flatpak/com.chenyifaer.FaFaRunner.yml
          sha256=$sha256 yq -i '.modules[0].sources[0].sha256 = strenv(sha256)' flatpak/com.chenyifaer.FaFaRunner.yml

          desktop_url=https://raw.githubusercontent.com/fafarunner/fafarunner/"$TAG"/linux/shared/com.chenyifaer.FaFaRunner.desktop
          wget -O com.chenyifaer.FaFaRunner.desktop "$desktop_url"
          desktop_sha256=$(sha256sum com.chenyifaer.FaFaRunner.desktop | awk '{print $1}')
          rm -f com.chenyifaer.FaFaRunner.desktop
          desktop_url=$desktop_url yq -i '.modules[0].sources[2].url = strenv(desktop_url)' flatpak/com.chenyifaer.FaFaRunner.yml
          desktop_sha256=$desktop_sha256 yq -i '.modules[0].sources[2].sha256 = strenv(desktop_sha256)' flatpak/com.chenyifaer.FaFaRunner.yml

          appdata_url=https://raw.githubusercontent.com/fafarunner/fafarunner/"$TAG"/linux/shared/com.chenyifaer.FaFaRunner.metainfo.xml
          wget -O com.chenyifaer.FaFaRunner.metainfo.xml "$appdata_url"
          appdata_sha256=$(sha256sum com.chenyifaer.FaFaRunner.metainfo.xml | awk '{print $1}')
          rm -f com.chenyifaer.FaFaRunner.metainfo.xml
          appdata_url=$appdata_url yq -i '.modules[0].sources[3].url = strenv(appdata_url)' flatpak/com.chenyifaer.FaFaRunner.yml
          appdata_sha256=$appdata_sha256 yq -i '.modules[0].sources[3].sha256 = strenv(appdata_sha256)' flatpak/com.chenyifaer.FaFaRunner.yml
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          VERSION: ${{ needs.create_release.outputs.version }}

      - name: Show config
        run: cat flatpak/com.chenyifaer.FaFaRunner.yml

      - name: Build flatpak
        uses: flatpak/flatpak-github-actions/flatpak-builder@master
        with:
          bundle: FaFaRunner.flatpak
          manifest-path: flatpak/com.chenyifaer.FaFaRunner.yml
          cache: true
          restore-cache: true
          cache-key: flatpak-builder-${{ github.sha }}-cache-restored
          arch: x86_64
          upload-artifact: false

      # Package the build.
      - name: Copy build for flatpak
        run: |
          ls -la
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          mv ./FaFaRunner.flatpak $GITHUB_WORKSPACE/FaFaRunner_"$RELEASE"_linux_amd64.flatpak
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: "${{ needs.create_release.outputs.version }}"

      - name: Install gh
        run: |
          sudo dnf -y install git
          sudo dnf -y install 'dnf-command(config-manager)'
          sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          sudo dnf -y install gh --repo gh-cli

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          gh release upload "$RELEASE" ./*.flatpak
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

  linux_flatpak_aarch64:
    name: Create linux flatpak (aarch64)
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:freedesktop-23.08
      options: --privileged
    needs:
      - create_release
      - linux_deb_aarch64
    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            if ! command -v wget >/dev/null 2>&1; then
              echo "wget not exists"
              sudo dnf -y install wget
            fi
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq &&\
            chmod +x /usr/bin/yq
          fi
          yq --version

      - name: Update version
        run: |
          # Update flatpak/com.chenyifaer.FaFaRunner.yml
          TAG="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          
          url=https://github.com/fafarunner/fafarunner/releases/download/"$TAG"/fafarunner_"$RELEASE"_linux_aarch64.deb
          wget -O fafarunner.deb "$url"
          sha256=$(sha256sum fafarunner.deb | awk '{print $1}')
          rm -f fafarunner.deb
          url=$url yq -i '.modules[0].sources[1].url = strenv(url)' flatpak/com.chenyifaer.FaFaRunner.yml
          sha256=$sha256 yq -i '.modules[0].sources[1].sha256 = strenv(sha256)' flatpak/com.chenyifaer.FaFaRunner.yml

          desktop_url=https://raw.githubusercontent.com/fafarunner/fafarunner/"$TAG"/linux/shared/com.chenyifaer.FaFaRunner.desktop
          wget -O com.chenyifaer.FaFaRunner.desktop "$desktop_url"
          desktop_sha256=$(sha256sum com.chenyifaer.FaFaRunner.desktop | awk '{print $1}')
          rm -f com.chenyifaer.FaFaRunner.desktop
          desktop_url=$desktop_url yq -i '.modules[0].sources[2].url = strenv(desktop_url)' flatpak/com.chenyifaer.FaFaRunner.yml
          desktop_sha256=$desktop_sha256 yq -i '.modules[0].sources[2].sha256 = strenv(desktop_sha256)' flatpak/com.chenyifaer.FaFaRunner.yml

          appdata_url=https://raw.githubusercontent.com/fafarunner/fafarunner/"$TAG"/linux/shared/com.chenyifaer.FaFaRunner.metainfo.xml
          wget -O com.chenyifaer.FaFaRunner.metainfo.xml "$appdata_url"
          appdata_sha256=$(sha256sum com.chenyifaer.FaFaRunner.metainfo.xml | awk '{print $1}')
          rm -f com.chenyifaer.FaFaRunner.metainfo.xml
          appdata_url=$appdata_url yq -i '.modules[0].sources[3].url = strenv(appdata_url)' flatpak/com.chenyifaer.FaFaRunner.yml
          appdata_sha256=$appdata_sha256 yq -i '.modules[0].sources[3].sha256 = strenv(appdata_sha256)' flatpak/com.chenyifaer.FaFaRunner.yml
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          VERSION: ${{ needs.create_release.outputs.version }}

      - name: Show config
        run: cat flatpak/com.chenyifaer.FaFaRunner.yml

      - name: Install QEMU deps
        run: |
          dnf -y install docker

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build flatpak
        uses: flatpak/flatpak-github-actions/flatpak-builder@master
        with:
          bundle: FaFaRunner.flatpak
          manifest-path: flatpak/com.chenyifaer.FaFaRunner.yml
          cache: true
          restore-cache: true
          cache-key: flatpak-builder-${{ github.sha }}-cache-restored
          arch: aarch64
          upload-artifact: false

      # Package the build.
      - name: Copy build for flatpak
        run: |
          ls -la
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          mv ./FaFaRunner.flatpak $GITHUB_WORKSPACE/FaFaRunner_"$RELEASE"_linux_aarch64.flatpak
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: "${{ needs.create_release.outputs.version }}"

      - name: Install gh
        run: |
          sudo dnf -y install git
          sudo dnf -y install 'dnf-command(config-manager)'
          sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          sudo dnf -y install gh --repo gh-cli

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          gh release upload "$RELEASE" ./*.flatpak
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

  linux_snap:
    name: Create linux snap
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup LXD
        uses: canonical/setup-lxd@v0.1.1
        with:
          channel: latest/stable

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            brew install yq
          fi
          yq --version

      - name: Install snapcraft
        run: |
          sudo snap install snapcraft --classic

      - name: Update snapcraft.yaml
        run: |
          rm -f snap/snapcraft-arm64.yaml
          VERSION=$VERSION yq -i '.version = strenv(VERSION)' snap/snapcraft.yaml
          yq -i '.parts.fafarunner.build-environment[1].FLUTTER_VERSION = "3.24.1"' snap/snapcraft.yaml
        env:
          VERSION: ${{ needs.create_release.outputs.version }}

      - name: Build snap
        run: |
          # https://snapcraft.io/docs/flutter-applications
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          snapcraft --output fafarunner_"$RELEASE"_linux_amd64.snap
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      # Package the build.
      - name: Copy build for snap
        run: ls -la *.snap

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.snap
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env
          if which snapcraft >/dev/null 2>&1; then
            echo "snapcraft exists"
            snapcraft clean
          fi

  linux_snap_aarch64:
    name: Create linux snap (aarch64)
    runs-on: buildjet-4vcpu-ubuntu-2204-arm
    needs:
      - create_release
    env:
      LXD_GROUP: lxd
    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            sudo snap install -y yq
          fi
          yq --version

      - name: Configure .env
        run: |
          ENV_BASE64="$([[ "$ENV" == "staging" ]] && echo "$ENV_STG_BASE64" || echo "$ENV_PROD_BASE64")"
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64 }}

      - name: Setup LXD
        uses: canonical/setup-lxd@main
        with:
          group: ${{ env.LXD_GROUP }}
          channel: latest/stable

      - name: Add user to the LXD (lxd) group
        run: |
          sudo usermod -a -G $LXD_GROUP $USER
          newgrp $LXD_GROUP

      - name: Restart lxd
        run: sudo snap restart lxd

      - name: Update snapcraft.yaml
        run: |
          rm -f snap/snapcraft.yaml
          mv snap/snapcraft-arm64.yaml snap/snapcraft.yaml
          VERSION=$VERSION yq -i '.version = strenv(VERSION)' snap/snapcraft.yaml
        env:
          VERSION: ${{ needs.create_release.outputs.version }}

      - name: Install snapcraft
        run: sudo snap install snapcraft --classic

      - name: Build snap
        run: |
          # https://snapcraft.io/docs/flutter-applications
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$VERSION.pre" || echo "$VERSION")"
          sudo snapcraft --output "fafarunner_"$RELEASE"_linux_aarch64.snap"
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      # Package the build.
      - name: Copy build for snap
        run: ls -la *.snap

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "staging" ]] && echo "$TAG_NAME.pre" || echo "$TAG_NAME")"
          gh release upload "$RELEASE" ./*.snap
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env
          if which snapcraft >/dev/null 2>&1; then
            echo "snapcraft exists"
            sudo snapcraft clean
          fi

  windows_msi:
    name: Create windows msi
    runs-on: windows-latest
    env:
      Platform: x64
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Check msvc
        run: |
          $directories = Get-ChildItem -Path "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC" -Directory | Where-Object { $_.Name -match '^[0-9]{1,}' }

          # 如果目录列表不为空，则找到最后一个目录
          if ($directories.Count -gt 0) {
              $lastDirectory = $directories[-1]
              Write-Output "最后一个以数字开头的目录是: $($lastDirectory.FullName)"
          } else {
              Write-Output "未找到以数字开头的目录"
          }

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install wix toolset
        shell: pwsh
        run: |
          dotnet tool install --global wix
          wix --version

      - name: Configure .env
        run: |
          echo "$pwd"
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env

      - name: Update msi version
        shell: pwsh
        run: |
          # 文件路径
          $filePath = "msi\fafarunner\Package.wxs"

          # 读取文件内容
          $content = Get-Content -Path $filePath -Raw

          # 替换使用正则表达式
          $newContent = $content -replace "\b\d{1,4}\.\d{1,4}\.\d{1,4}\.\d{1,4}\b", "$env:VERSION_SHORT.$env:BUILD_NUMBER"

          # 写回文件
          Set-Content -Path $filePath -Value $newContent -NoNewline
        env:
          VERSION_SHORT: ${{ needs.create_release.outputs.version_short }}
          BUILD_NUMBER: ${{ needs.create_release.outputs.build_number }}

      - name: Create msi
        shell: pwsh
        run: |
          echo $env:RUNNER_TEMP
          $certificatePath = "$env:RUNNER_TEMP\fafarunner.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $env:FLUTTER_BUILD_OUTPUT_DIR = "$pwd\build\windows\$env:Platform\runner\Release"
          $env:VISUAL_STUDIO_REDIST_DIR = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\14.40.33807\$env:Platform\Microsoft.VC143.CRT"
          dotnet build .\msi\fafarunner\fafarunner.wixproj --arch "$env:Platform" --configuration Release

          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool sign /v /f "$certificatePath" /fd SHA256 /t http://timestamp.comodoca.com/authenticode /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /n "$env:WINDOWS_PUBLISHER_NAME" (get-item ".\msi\fafarunner\bin\$env:Platform\Release\*\*.msi")
        env:
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      # Package the build.
      - name: Copy build for msi
        shell: pwsh
        run: |
          $RELEASE = $(If ($env:ENV -eq "staging") {"$env:VERSION.pre"} Else {"$env:VERSION"})
          Rename-Item -Path "$pwd\msi\fafarunner\bin\$env:Platform\Release\en-US\fafarunner.msi" -NewName "fafarunner_$RELEASE`_windows_$env:Platform`_en-US.msi"
          Rename-Item -Path "$pwd\msi\fafarunner\bin\$env:Platform\Release\zh-CN\fafarunner.msi" -NewName "fafarunner_$RELEASE`_windows_$env:Platform`_zh-CN.msi"
          ls -R ".\msi\fafarunner\bin\$env:Platform\Release"
          cp ".\msi\fafarunner\bin\$env:Platform\Release\*\*.msi" "$env:GITHUB_WORKSPACE\"
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          $RELEASE = $(If ($env:ENV -eq "staging") {"$env:TAG_NAME.pre"} Else {"$env:TAG_NAME"})
          # https://github.com/cli/cli/issues/5099
          gh release upload "$RELEASE" (get-item .\*.msi)
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          ls
          if (test-path -Path "$env:RUNNER_TEMP\fafarunner.pfx") {
            echo "$env:RUNNER_TEMP\fafarunner.pfx"
            remove-item -Path "$env:RUNNER_TEMP\fafarunner.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\fafarunner.pfx) doesn't exist."
          }
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

  windows_msix:
    name: Create windows msix
    runs-on: windows-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          echo "$pwd"
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          echo $env:RUNNER_TEMP
          $certificatePath = "$env:RUNNER_TEMP\fafarunner.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $yamlFile = ".\pubspec.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile

          # 获取环境变量的值
          $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME).Value
          $identityName = (Get-Item -Path Env:WINDOWS_IDENTITY_NAME).Value
          $certificatePassword = (Get-Item -Path Env:WINDOWS_CERTIFICATE_PASSWORD).Value
          $publisher = (Get-Item -Path Env:WINDOWS_PUBLISHER).Value

          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".msix_config.publisher_display_name = `"$publisherName`" | .msix_config.identity_name = `"$identityName`" | .msix_config.certificate_path = `"$certificatePath`" | .msix_config.certificate_password = `"$certificatePassword`" | .msix_config.publisher = `"$publisher`"" -

          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
          WINDOWS_IDENTITY_NAME: ${{ secrets.WINDOWS_IDENTITY_NAME }}
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          WINDOWS_PUBLISHER: ${{ secrets.WINDOWS_PUBLISHER }}

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env

      - name: Create msix
        run: |
          $RELEASE = $(If ($env:ENV -eq "staging") {"$env:VERSION.pre"} Else {"$env:VERSION"})
          dart run msix:create --build-windows false --output-name "fafarunner_$RELEASE`_windows_x64"
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION: ${{ needs.create_release.outputs.version }}

      # Package the build.
      - name: Copy build for msix
        run: |
          ls
          cp .\*.msix "$env:GITHUB_WORKSPACE\"
        working-directory: build\windows\x64\runner\Release

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          $RELEASE = $(If ($env:ENV -eq "staging") {"$env:TAG_NAME.pre"} Else {"$env:TAG_NAME"})
          # https://github.com/cli/cli/issues/5099
          gh release upload "$RELEASE" (get-item .\*.msix)
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\fafarunner.pfx") {
            echo "$env:RUNNER_TEMP\fafarunner.pfx"
            remove-item -Path "$env:RUNNER_TEMP\fafarunner.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\fafarunner.pfx) doesn't exist."
          }
          
          if (test-path -Path "windows\packaging\msix\make_config.yaml") {
            echo "windows\packaging\msix\make_config.yaml"
            remove-item -Path "windows\packaging\msix\make_config.yaml" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File(windows\packaging\msix\make_config.yaml) doesn't exist."
          }
          
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

  windows_exe:
    name: Create windows exe
    runs-on: windows-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          echo "$pwd"
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      #      - name: Compile .iss to .exe installer
      #        uses: Minionguyjpro/Inno-Setup-Action@v1.2.4
      #        with:
      #          path: windows/packaging/exe/inno_setup.iss
      #          options: /O+

      - name: Copy ChineseSimplified.isl to C:\Program Files (x86)\Inno Setup 6\Languages\
        run: |
          copy-item -Path windows\Languages\Unofficial\*.isl -Destination 'C:\Program Files (x86)\Inno Setup 6\Languages\'

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          $SETUP_ICON_FILE = "$pwd\windows\runner\resources\app_icon.ico"
          echo $SETUP_ICON_FILE

          $yamlFile = ".\windows\packaging\exe\make_config.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile

          # 获取环境变量的值
          $appId = (Get-Item -Path Env:WINDOWS_APP_ID).Value
          $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME).Value

          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".app_id = `"$appId`" | .publisher_name = `"$publisherName`" | .setup_icon_file = `"$SETUP_ICON_FILE`"" -

          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_APP_ID: ${{ secrets.WINDOWS_APP_ID }}
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}

      - name: Build exe
        run: |
          $VERSION_SUFFIX = $(If ($env:ENV -eq "staging") {".pre"} Else {""})
          flutter_distributor package --flutter-build-args "dart-define-from-file=.env" --platform windows --targets exe --artifact-name "{{name}}_{{build_name}}+{{build_number}}$VERSION_SUFFIX`_{{platform}}_x64.{{ext}}"
        env:
          ENV: ${{ github.event.inputs.env }}

      - name: Signing
        run: |
          echo $env:RUNNER_TEMP
          $certificatePath = "$env:RUNNER_TEMP\fafarunner.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)
          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool sign /f "$certificatePath" /fd SHA256 /t http://timestamp.comodoca.com/authenticode /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /n "$env:WINDOWS_PUBLISHER_NAME" (get-item ".\**\*.exe")
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
        working-directory: dist

      # Package the build.
      - name: Copy build for exe
        run: |
          ls -R
          cp .\**\*.exe "$env:GITHUB_WORKSPACE\"
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          $RELEASE = $(If ($env:ENV -eq "staging") {"$env:TAG_NAME.pre"} Else {"$env:TAG_NAME"})
          # https://github.com/cli/cli/issues/5099
          gh release upload "$RELEASE" (get-item .\*.exe)
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\fafarunner.pfx") {
            echo "$env:RUNNER_TEMP\fafarunner.pfx"
            remove-item -Path "$env:RUNNER_TEMP\fafarunner.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\fafarunner.pfx) doesn't exist."
          }
          
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

  windows_zip:
    name: Create windows zip
    runs-on: windows-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.1'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          echo "$pwd"
          $env_base64 = $(If ($env:ENV -eq "staging") {"$env:ENV_STG_BASE64"} Else {"$env:ENV_PROD_BASE64"})
          $bytes = echo $env_base64 | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV: ${{ github.event.inputs.env }}
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
          ENV_PROD_BASE64: ${{ secrets.ENV_PROD_BASE64_WINDOWS }}

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build zip
        run: |
          $VERSION_SUFFIX = $(If ($env:ENV -eq "staging") {".pre"} Else {""})
          flutter_distributor package --flutter-build-args "dart-define-from-file=.env" --platform windows --targets zip --artifact-name "{{name}}_{{build_name}}+{{build_number}}$VERSION_SUFFIX`_{{platform}}_x64.{{ext}}"
        env:
          ENV: ${{ github.event.inputs.env }}

      # Package the build.
      - name: Copy build for zip
        run: |
          ls -R
          cp .\**\*.zip "$env:GITHUB_WORKSPACE\"
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          $RELEASE = $(If ($env:ENV -eq "staging") {"$env:TAG_NAME.pre"} Else {"$env:TAG_NAME"})
          # https://github.com/cli/cli/issues/5099
          gh release upload "$RELEASE" (get-item .\*.zip)
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.FR_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          ls
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }
