name: Test iOS

on:
  workflow_dispatch:

# Declare default permissions as readonly.
permissions: read-all

jobs:
  ios:
    name: Create ios
    runs-on: macos-15
    steps:
      - name: Select Xcode version
        run: sudo xcode-select --switch /Applications/Xcode_16.4.app

      - name: print Xcode version
        run: xcodebuild -version

      - uses: actions/checkout@v5

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.35.4'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      - name: Install the Apple certificate and provisioning profile
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          CERTIFICATE_DEV_PATH=$RUNNER_TEMP/build_certificate_dev.p12
          PP_PATH=$RUNNER_TEMP/fafa_runner_appstore.mobileprovision
          PP_DEV_PATH=$RUNNER_TEMP/fafa_runner_dev.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$CERTIFICATE_DEV_BASE64" | base64 --decode --output $CERTIFICATE_DEV_PATH
          echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $PP_DEV_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_DEV_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        env:
          CERTIFICATE_BASE64: ${{ secrets.P12_BASE64 }}
          CERTIFICATE_DEV_BASE64: ${{ secrets.P12_DEV_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          PROVISION_PROFILE_DEV_BASE64: ${{ secrets.PROVISIONING_PROFILE_DEV_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Resolving ios dependencies
        run: pod install --repo-update
        working-directory: ios

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: ios

      - name: Build
        run: |
          echo "╠ Releasing to app store..."
          flutter build ipa --release --export-options-plist=ios/ExportOptions/debug.plist

      - name: Set version
        id: version_step
        run: |
          VERSION=$(yq '.version' pubspec.yaml)
          echo "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          VERSION=$(yq '.version' pubspec.yaml)
          echo "VERSION: $VERSION."

          VERSION_SHORT=$(echo "$VERSION" | sed -e "s/+.*//")
          echo "VERSION_SHORT: $VERSION_SHORT."

          BUILD_NUMBER=$(echo "$VERSION" | sed -e "s/.*+//")
          echo "BUILD_NUMBER: $BUILD_NUMBER."

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_short=$VERSION_SHORT" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      # Package the build.
      - name: Copy build for iOS
        run: |
          ls -la
          cp *.ipa $GITHUB_WORKSPACE/FaFaRunner-"$VERSION_SHORT.$BUILD_NUMBER".ipa
        working-directory: build/ios/ipa
        env:
          VERSION_SHORT: ${{ steps.version_step.outputs.version_short }}
          BUILD_NUMBER: ${{ steps.version_step.outputs.build_number }}

      - uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-artifact
          path: ./*.ipa

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/fafa_runner_appstore.mobileprovision
          rm ~/Library/MobileDevice/Provisioning\ Profiles/fafa_runner_dev.mobileprovision
          rm -f .env
